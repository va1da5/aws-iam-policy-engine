{
  "name": "SCP Allow Only Specific Services",
  "description": "Update the Service Control Policy to restrict access to only specific services in order to prevent the potential misuse of cloud resources. Please see the list of allowed services below:\n  - Amazon S3\n  - AWS Lambda\n  - Amazon CloudFront\n  - Amazon CloudWatch\n\nThe following role needs to be exempt from the restrictions:\n  - **arn:aws:iam::*:role/cloudAdmin**\n",
  "policyType": "SERVICE_CONTROL_POLICY",
  "initialPolicy": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "AWSFullAccess",
        "Effect": "Allow",
        "Action": "*",
        "Resource": "*"
      }
    ]
  },
  "hints": [
    "**Service Control Policies (SCPs)** are a feature of AWS Organizations and are used to manage permissions across multiple AWS accounts within  an organization. SCPs allow you to set permission guardrails for accounts,  which can restrict the maximum permissions that can be granted to IAM  identities within those accounts. SCPs do not grant permissions by themselves; they only define what is allowed or denied at the organizational level.\n"
  ],
  "solution": "Congratulations! Your created policy should look similar to the below:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AWSFullAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Condition\": {\n        \"ArnNotLike\": {\n          \"aws:PrincipalArn\": [\n            \"arn:aws:iam::*:role/cloudAdmin\"\n          ]\n        }\n      },\n      \"Effect\": \"Deny\",\n      \"NotAction\": [\n        \"s3:*\",\n        \"lambda:*\",\n        \"cloudfront:*\",\n        \"cloudwatch:*\"\n      ],\n      \"Resource\": \"*\",\n      \"Sid\": \"DenyAllExceptDefined\"\n    }\n  ]\n}\n```\n",
  "testCases": [
    {
      "context": {
        "action": "${s3Actions}",
        "resource": "arn:aws:s3:us-east-1:123456789012:amzn-s3-demo-bucket",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:user/brian"
      },
      "allow": true
    },
    {
      "context": {
        "action": "${lambdaActions}",
        "resource": "arn:aws:lambda:us-east-1:123456789012:function:*",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:user/alice"
      },
      "allow": true
    },
    {
      "context": {
        "action": "${cloudfrontActions}",
        "resource": "arn:aws:cloudfront::123456789012:*",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:user/john"
      },
      "allow": true
    },
    {
      "context": {
        "action": "${cloudwatchActions}",
        "resource": "arn:aws:cloudwatch:us-east-1:123456789012:*",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:role/monitoring"
      },
      "allow": true
    },
    {
      "context": {
        "action": "${deniedActions}",
        "resource": "arn:aws:${deniedServices}:us-east-1:123456789012:*",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:user/robert"
      },
      "allow": false
    },
    {
      "context": {
        "action": "${deniedActions}",
        "resource": "arn:aws:${deniedServices}:us-east-1:123456789012:*",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:role/cloudAdmin"
      },
      "allow": true
    },
    {
      "context": {
        "action": "${cloudwatchActions}",
        "resource": "arn:aws:cloudwatch:us-east-1:123456789012:*",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:role/cloudAdmin"
      },
      "allow": true
    },
    {
      "context": {
        "action": "${s3Actions}",
        "resource": "arn:aws:s3:us-east-1:123456789012:amzn-s3-demo-bucket",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:user/cloudAdmin"
      },
      "allow": true
    },
    {
      "context": {
        "action": "${lambdaActions}",
        "resource": "arn:aws:lambda:us-east-1:123456789012:function:*",
        "aws:PrincipalArn": "arn:aws:iam::123456789012:user/cloudAdmin"
      },
      "allow": true
    }
  ],
  "values": {
    "s3Actions": [
      "s3:AbortMultipartUpload",
      "s3:AssociateAccessGrantsIdentityCenter",
      "s3:BypassGovernanceRetention",
      "s3:CreateAccessGrant",
      "s3:CreateAccessGrantsInstance",
      "s3:CreateAccessGrantsLocation",
      "s3:CreateAccessPoint",
      "s3:CreateAccessPointForObjectLambda",
      "s3:CreateBucket",
      "s3:CreateJob",
      "s3:CreateMultiRegionAccessPoint",
      "s3:CreateStorageLensGroup",
      "s3:DeleteAccessGrant",
      "s3:DeleteAccessGrantsInstance",
      "s3:DeleteAccessGrantsInstanceResourcePolicy",
      "s3:DeleteAccessGrantsLocation",
      "s3:DeleteAccessPoint",
      "s3:DeleteAccessPointPolicy",
      "s3:DeleteBucket",
      "s3:DeleteBucketPolicy",
      "s3:DeleteBucketWebsite",
      "s3:DeleteJobTagging",
      "s3:DeleteMultiRegionAccessPoint",
      "s3:DeleteObject",
      "s3:DeleteObjectTagging",
      "s3:DeleteObjectVersion",
      "s3:DescribeJob",
      "s3:DescribeMultiRegionAccessPointOperation",
      "s3:DissociateAccessGrantsIdentityCenter",
      "s3:GetAccelerateConfiguration",
      "s3:GetAccessGrant",
      "s3:GetAccessGrantsInstance",
      "s3:GetAccessGrantsLocation",
      "s3:GetAccessPoint",
      "s3:GetAccessPointForObjectLambda",
      "s3:GetAccessPointPolicy",
      "s3:GetAccessPointPolicyForObjectLambda",
      "s3:GetAccessPointPolicyStatus",
      "s3:GetAccountPublicAccessBlock",
      "s3:GetAnalyticsConfiguration",
      "s3:GetBucketAcl",
      "s3:GetBucketCORS",
      "s3:GetBucketLocation",
      "s3:GetBucketLogging",
      "s3:GetBucketNotification",
      "s3:GetBucketObjectLockConfiguration",
      "s3:GetBucketOwnershipControls",
      "s3:GetBucketPolicy",
      "s3:GetBucketPolicyStatus",
      "s3:GetBucketPublicAccessBlock",
      "s3:GetBucketRequestPayment",
      "s3:GetBucketTagging",
      "s3:GetBucketVersioning",
      "s3:GetBucketWebsite",
      "s3:GetDataAccess",
      "s3:GetEncryptionConfiguration",
      "s3:GetIntelligentTieringConfiguration",
      "s3:GetInventoryConfiguration",
      "s3:GetJobTagging",
      "s3:GetLifecycleConfiguration",
      "s3:GetMetricsConfiguration",
      "s3:GetMultiRegionAccessPointRoutes",
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectAttributes",
      "s3:GetObjectLegalHold",
      "s3:GetObjectRetention",
      "s3:GetObjectTagging",
      "s3:GetObjectTorrent",
      "s3:GetObjectVersion",
      "s3:GetObjectVersionAcl",
      "s3:GetObjectVersionAttributes",
      "s3:GetObjectVersionForReplication",
      "s3:GetObjectVersionTagging",
      "s3:GetObjectVersionTorrent",
      "s3:GetReplicationConfiguration",
      "s3:InitiateReplication",
      "s3:ListAccessGrants",
      "s3:ListAccessGrantsInstances",
      "s3:ListAccessGrantsLocations",
      "s3:ListAccessPoints",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "s3:ListBucketMultipartUploads",
      "s3:ListBucketVersions",
      "s3:ListCallerAccessGrants",
      "s3:ListJobs",
      "s3:ListMultiRegionAccessPoints",
      "s3:ListMultipartUploadParts",
      "s3:ListStorageLensConfigurations",
      "s3:ListStorageLensGroups",
      "s3:ListTagsForResource",
      "s3:ObjectOwnerOverrideToBucketOwner",
      "s3:PauseReplication",
      "s3:PutAccelerateConfiguration",
      "s3:PutAccessPointPolicy",
      "s3:PutAccessPointPolicyForObjectLambda",
      "s3:PutAccessPointPublicAccessBlock",
      "s3:PutAccountPublicAccessBlock",
      "s3:PutAnalyticsConfiguration",
      "s3:PutBucketAcl",
      "s3:PutBucketCORS",
      "s3:PutBucketLogging",
      "s3:PutBucketOwnershipControls",
      "s3:PutBucketPolicy",
      "s3:PutBucketPublicAccessBlock",
      "s3:PutBucketRequestPayment",
      "s3:PutBucketTagging",
      "s3:PutBucketVersioning",
      "s3:PutBucketWebsite",
      "s3:PutEncryptionConfiguration",
      "s3:PutInventoryConfiguration",
      "s3:PutJobTagging",
      "s3:PutLifecycleConfiguration",
      "s3:PutMetricsConfiguration",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectLegalHold",
      "s3:PutObjectRetention",
      "s3:PutObjectTagging",
      "s3:PutObjectVersionAcl",
      "s3:PutObjectVersionTagging",
      "s3:PutReplicationConfiguration",
      "s3:ReplicateDelete",
      "s3:ReplicateObject",
      "s3:ReplicateTags",
      "s3:RestoreObject",
      "s3:TagResource",
      "s3:UntagResource",
      "s3:UpdateAccessGrantsLocation",
      "s3:UpdateJobPriority",
      "s3:UpdateJobStatus",
      "s3:UpdateStorageLensGroup"
    ],
    "lambdaActions": [
      "lambda:AddLayerVersionPermission",
      "lambda:AddPermission",
      "lambda:CreateAlias",
      "lambda:CreateCodeSigningConfig",
      "lambda:CreateEventSourceMapping",
      "lambda:CreateFunction",
      "lambda:CreateFunctionUrlConfig",
      "lambda:DeleteAlias",
      "lambda:DeleteCodeSigningConfig",
      "lambda:DeleteEventSourceMapping",
      "lambda:DeleteFunction",
      "lambda:DeleteFunctionCodeSigningConfig",
      "lambda:DeleteFunctionConcurrency",
      "lambda:DeleteFunctionEventInvokeConfig",
      "lambda:DeleteFunctionUrlConfig",
      "lambda:DeleteLayerVersion",
      "lambda:DisableReplication",
      "lambda:EnableReplication",
      "lambda:GetAccountSettings",
      "lambda:GetAlias",
      "lambda:GetCodeSigningConfig",
      "lambda:GetEventSourceMapping",
      "lambda:GetFunction",
      "lambda:GetFunctionConcurrency",
      "lambda:GetFunctionConfiguration",
      "lambda:GetFunctionEventInvokeConfig",
      "lambda:GetFunctionRecursionConfig",
      "lambda:GetFunctionUrlConfig",
      "lambda:GetLayerVersion",
      "lambda:GetLayerVersionPolicy",
      "lambda:GetPolicy",
      "lambda:GetRuntimeManagementConfig",
      "lambda:InvokeAsync",
      "lambda:InvokeFunction",
      "lambda:InvokeFunctionUrl",
      "lambda:ListAliases",
      "lambda:ListCodeSigningConfigs",
      "lambda:ListEventSourceMappings",
      "lambda:ListFunctionEventInvokeConfigs",
      "lambda:ListFunctionUrlConfigs",
      "lambda:ListFunctions",
      "lambda:ListLayerVersions",
      "lambda:ListLayers",
      "lambda:ListProvisionedConcurrencyConfigs",
      "lambda:ListTags",
      "lambda:ListVersionsByFunction",
      "lambda:PublishLayerVersion",
      "lambda:PublishVersion",
      "lambda:PutFunctionCodeSigningConfig",
      "lambda:PutFunctionConcurrency",
      "lambda:PutFunctionEventInvokeConfig",
      "lambda:PutFunctionRecursionConfig",
      "lambda:PutRuntimeManagementConfig",
      "lambda:RemoveLayerVersionPermission",
      "lambda:RemovePermission",
      "lambda:TagResource",
      "lambda:UntagResource",
      "lambda:UpdateAlias",
      "lambda:UpdateCodeSigningConfig",
      "lambda:UpdateEventSourceMapping",
      "lambda:UpdateFunctionCode",
      "lambda:UpdateFunctionConfiguration",
      "lambda:UpdateFunctionEventInvokeConfig",
      "lambda:UpdateFunctionUrlConfig"
    ],
    "cloudfrontActions": [
      "cloudfront:AssociateAlias",
      "cloudfront:CopyDistribution",
      "cloudfront:CreateAnycastIpList",
      "cloudfront:CreateCachePolicy",
      "cloudfront:CreateContinuousDeploymentPolicy",
      "cloudfront:CreateDistribution",
      "cloudfront:CreateFunction",
      "cloudfront:CreateInvalidation",
      "cloudfront:CreateKeyGroup",
      "cloudfront:CreateKeyValueStore",
      "cloudfront:CreateMonitoringSubscription",
      "cloudfront:CreateOriginAccessControl",
      "cloudfront:CreateOriginRequestPolicy",
      "cloudfront:CreatePublicKey",
      "cloudfront:CreateRealtimeLogConfig",
      "cloudfront:CreateResponseHeadersPolicy",
      "cloudfront:CreateSavingsPlan",
      "cloudfront:CreateStreamingDistribution",
      "cloudfront:CreateStreamingDistributionWithTags",
      "cloudfront:CreateVpcOrigin",
      "cloudfront:DeleteAnycastIpList",
      "cloudfront:DeleteCachePolicy",
      "cloudfront:DeleteDistribution",
      "cloudfront:DeleteFieldLevelEncryptionConfig",
      "cloudfront:DeleteFieldLevelEncryptionProfile",
      "cloudfront:DeleteFunction",
      "cloudfront:DeleteKeyGroup",
      "cloudfront:DeleteKeyValueStore",
      "cloudfront:DeleteMonitoringSubscription",
      "cloudfront:DeleteOriginAccessControl",
      "cloudfront:DeleteOriginRequestPolicy",
      "cloudfront:DeletePublicKey",
      "cloudfront:DeleteRealtimeLogConfig",
      "cloudfront:DeleteVpcOrigin",
      "cloudfront:DescribeFunction",
      "cloudfront:DescribeKeyValueStore",
      "cloudfront:GetAnycastIpList",
      "cloudfront:GetCachePolicy",
      "cloudfront:GetCachePolicyConfig",
      "cloudfront:GetContinuousDeploymentPolicy",
      "cloudfront:GetContinuousDeploymentPolicyConfig",
      "cloudfront:GetDistribution",
      "cloudfront:GetDistributionConfig",
      "cloudfront:GetFieldLevelEncryption",
      "cloudfront:GetFieldLevelEncryptionConfig",
      "cloudfront:GetFieldLevelEncryptionProfile",
      "cloudfront:GetFunction",
      "cloudfront:GetInvalidation",
      "cloudfront:GetKeyGroup",
      "cloudfront:GetKeyGroupConfig",
      "cloudfront:GetMonitoringSubscription",
      "cloudfront:GetOriginAccessControl",
      "cloudfront:GetOriginAccessControlConfig",
      "cloudfront:GetOriginRequestPolicy",
      "cloudfront:GetOriginRequestPolicyConfig",
      "cloudfront:GetPublicKey",
      "cloudfront:GetPublicKeyConfig",
      "cloudfront:GetRealtimeLogConfig",
      "cloudfront:GetResponseHeadersPolicy",
      "cloudfront:GetResponseHeadersPolicyConfig",
      "cloudfront:GetSavingsPlan",
      "cloudfront:GetStreamingDistribution",
      "cloudfront:GetVpcOrigin",
      "cloudfront:ListAnycastIpLists",
      "cloudfront:ListCachePolicies",
      "cloudfront:ListConflictingAliases",
      "cloudfront:ListContinuousDeploymentPolicies",
      "cloudfront:ListDistributions",
      "cloudfront:ListDistributionsByCachePolicyId",
      "cloudfront:ListDistributionsByKeyGroup",
      "cloudfront:ListDistributionsByLambdaFunction",
      "cloudfront:ListDistributionsByVpcOriginId",
      "cloudfront:ListFieldLevelEncryptionConfigs",
      "cloudfront:ListFieldLevelEncryptionProfiles",
      "cloudfront:ListFunctions",
      "cloudfront:ListInvalidations",
      "cloudfront:ListKeyGroups",
      "cloudfront:ListKeyValueStores",
      "cloudfront:ListOriginAccessControls",
      "cloudfront:ListOriginRequestPolicies",
      "cloudfront:ListPublicKeys",
      "cloudfront:ListRateCards",
      "cloudfront:ListRealtimeLogConfigs",
      "cloudfront:ListResponseHeadersPolicies",
      "cloudfront:ListSavingsPlans",
      "cloudfront:ListStreamingDistributions",
      "cloudfront:ListTagsForResource",
      "cloudfront:ListUsages",
      "cloudfront:ListVpcOrigins",
      "cloudfront:PublishFunction",
      "cloudfront:TagResource",
      "cloudfront:TestFunction",
      "cloudfront:UntagResource",
      "cloudfront:UpdateCachePolicy",
      "cloudfront:UpdateDistribution",
      "cloudfront:UpdateFunction",
      "cloudfront:UpdateKeyGroup",
      "cloudfront:UpdateKeyValueStore",
      "cloudfront:UpdateOriginAccessControl",
      "cloudfront:UpdateOriginRequestPolicy",
      "cloudfront:UpdatePublicKey",
      "cloudfront:UpdateRealtimeLogConfig",
      "cloudfront:UpdateResponseHeadersPolicy",
      "cloudfront:UpdateSavingsPlan",
      "cloudfront:UpdateStreamingDistribution",
      "cloudfront:UpdateVpcOrigin"
    ],
    "cloudwatchActions": [
      "cloudwatch:BatchGetServiceLevelIndicatorReport",
      "cloudwatch:BatchGetServiceLevelObjectiveBudgetReport",
      "cloudwatch:CreateServiceLevelObjective",
      "cloudwatch:DeleteAlarms",
      "cloudwatch:DeleteAnomalyDetector",
      "cloudwatch:DeleteDashboards",
      "cloudwatch:DeleteInsightRules",
      "cloudwatch:DeleteMetricStream",
      "cloudwatch:DeleteServiceLevelObjective",
      "cloudwatch:DescribeAlarmHistory",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DescribeAlarmsForMetric",
      "cloudwatch:DescribeAnomalyDetectors",
      "cloudwatch:DescribeInsightRules",
      "cloudwatch:DisableAlarmActions",
      "cloudwatch:DisableInsightRules",
      "cloudwatch:EnableAlarmActions",
      "cloudwatch:EnableInsightRules",
      "cloudwatch:EnableTopologyDiscovery",
      "cloudwatch:GenerateQuery",
      "cloudwatch:GetDashboard",
      "cloudwatch:GetInsightRuleReport",
      "cloudwatch:GetMetricData",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:GetMetricStream",
      "cloudwatch:GetMetricWidgetImage",
      "cloudwatch:GetService",
      "cloudwatch:GetServiceData",
      "cloudwatch:GetServiceLevelObjective",
      "cloudwatch:GetTopologyDiscoveryStatus",
      "cloudwatch:GetTopologyMap",
      "cloudwatch:Link",
      "cloudwatch:ListDashboards",
      "cloudwatch:ListEntitiesForMetric",
      "cloudwatch:ListManagedInsightRules",
      "cloudwatch:ListMetricStreams",
      "cloudwatch:ListMetrics",
      "cloudwatch:ListServiceLevelObjectives",
      "cloudwatch:ListServices",
      "cloudwatch:ListTagsForResource",
      "cloudwatch:PutAnomalyDetector",
      "cloudwatch:PutCompositeAlarm",
      "cloudwatch:PutDashboard",
      "cloudwatch:PutInsightRule",
      "cloudwatch:PutManagedInsightRules",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:PutMetricData",
      "cloudwatch:PutMetricStream",
      "cloudwatch:SetAlarmState",
      "cloudwatch:StartMetricStreams",
      "cloudwatch:StopMetricStreams",
      "cloudwatch:TagResource",
      "cloudwatch:UntagResource",
      "cloudwatch:UpdateServiceLevelObjective"
    ],
    "deniedActions": [
      "aps:ListAlertManagerSilences",
      "appconfig:GetLatestConfiguration",
      "ce:GetCostCategories",
      "mediatailor:ListPlaybackConfigurations",
      "lex:PutBot",
      "osis:ListPipelines",
      "vpc-lattice:ListResourceConfigurations",
      "lightsail:GetDomains",
      "ec2:DescribeCustomerGateways",
      "cognito-idp:UpdateUserPoolClient",
      "datazone:CreateGlossaryTerm",
      "dms:DeleteEndpoint",
      "forecast:DeleteDatasetGroup",
      "codeconnections:GetSyncBlockerSummary",
      "amplify:ListArtifacts",
      "a4b:GetContact",
      "fsx:CreateVolumeFromBackup",
      "backup-gateway:ListGateways",
      "storagegateway:CreateTapes",
      "redshift-serverless:GetTableRestoreStatus",
      "storagegateway:UpdateAutomaticTapeCreationPolicy",
      "omics:DeleteAnnotationStore",
      "lightsail:DeleteBucketAccessKey",
      "glue:GetCatalog",
      "chime:CreateMediaStreamPipeline",
      "glacier:GetJobOutput",
      "bedrock:ListImportedModels",
      "elasticache:DescribeGlobalReplicationGroups",
      "databrew:DescribeRuleset",
      "eks:AccessKubernetesApi",
      "cloudformation:EstimateTemplateCost",
      "athena:ListTagsForResource",
      "opsworks:CreateDeployment",
      "verified-access:AllowVerifiedAccess",
      "ec2:DescribeScheduledInstances",
      "iotwireless:GetServiceProfile",
      "license-manager-user-subscriptions:DeleteLicenseServerEndpoint",
      "elasticache:DecreaseNodeGroupsInGlobalReplicationGroup",
      "proton:ListEnvironmentTemplateVersions",
      "codecommit:UpdateDefaultBranch",
      "sqlworkbench:UpdateAccountConnectionSettings",
      "iot:CreateScheduledAudit",
      "kendra:UpdateFeaturedResultsSet",
      "vendor-insights:ListDataSources",
      "workdocs:DeleteDocumentVersion",
      "globalaccelerator:ListAccelerators",
      "wickr:ListTagsForResource",
      "forecast:DescribeDataset",
      "elasticache:DescribeUsers",
      "quicksight:DeleteIAMPolicyAssignment",
      "rds:ModifyDBShardGroup",
      "quicksight:CancelIngestion",
      "backup:UpdateRegionSettings",
      "batch:DeleteSchedulingPolicy",
      "panorama:UpdateDeviceMetadata",
      "iot-device-tester:CheckVersion",
      "guardduty:AcceptAdministratorInvitation",
      "globalaccelerator:DeprovisionByoipCidr",
      "bedrock:DeleteAgentActionGroup",
      "guardduty:GetFindings",
      "sqs:CancelMessageMoveTask",
      "dataexchange:GetJob",
      "workspaces-web:UpdateTrustStore",
      "cloudsearch:DeleteIndexField",
      "sns:GetEndpointAttributes",
      "sqlworkbench:UpdateFolder",
      "ecr:DescribeRepositoryCreationTemplates",
      "sts:AssumeRoot",
      "proton:DeleteServiceSyncConfig",
      "omics:ListRunCaches",
      "voiceid:DescribeFraudsterRegistrationJob",
      "aws-marketplace:Subscribe",
      "quicksight:SearchUsers",
      "config:DescribeConfigurationAggregatorSourcesStatus",
      "events:DisableRule",
      "shield:ListTagsForResource",
      "ec2:DisassociateClientVpnTargetNetwork",
      "datazone:DeleteSubscriptionGrant",
      "connect-campaigns:UpdateCampaignOutboundCallConfig",
      "chime:ListAppInstanceBots",
      "app-integrations:ListDataIntegrationAssociations",
      "lightsail:GetDisks",
      "docdb-elastic:GetPendingMaintenanceAction",
      "aps:DescribeAlertManagerDefinition",
      "notifications:RegisterNotificationHub",
      "frauddetector:UpdateList",
      "glue:SendFeedback",
      "backup-gateway:UntagResource",
      "rekognition:GetCelebrityInfo",
      "cognito-identity:UnlinkIdentity",
      "rolesanywhere:DisableTrustAnchor",
      "iot:DescribeDimension",
      "sagemaker:CreateStudioLifecycleConfig",
      "quicksight:DeleteDataSource",
      "datasync:DescribeLocationAzureBlob",
      "redshift:CancelQuerySession",
      "quicksight:DescribeUser",
      "elastic-inference:UntagResource",
      "m2:UpdateEnvironment",
      "secretsmanager:ListSecrets"
    ],
    "deniedServices": [
      "aps",
      "appconfig",
      "ce",
      "mediatailor",
      "lex",
      "osis",
      "vpc-lattice",
      "lightsail",
      "ec2",
      "cognito-idp",
      "datazone",
      "dms",
      "forecast",
      "codeconnections",
      "amplify",
      "a4b",
      "fsx",
      "backup-gateway",
      "storagegateway",
      "redshift-serverless",
      "storagegateway",
      "omics",
      "lightsail",
      "glue",
      "chime",
      "glacier",
      "bedrock",
      "elasticache",
      "databrew",
      "eks",
      "cloudformation",
      "athena",
      "opsworks",
      "verified-access",
      "ec2",
      "iotwireless",
      "license-manager-user-subscriptions",
      "elasticache",
      "proton",
      "codecommit",
      "sqlworkbench",
      "iot",
      "kendra",
      "vendor-insights",
      "workdocs",
      "globalaccelerator",
      "wickr",
      "forecast",
      "elasticache",
      "quicksight",
      "rds",
      "quicksight",
      "backup",
      "batch",
      "panorama",
      "iot-device-tester",
      "guardduty",
      "globalaccelerator",
      "bedrock",
      "guardduty",
      "sqs",
      "dataexchange",
      "workspaces-web",
      "cloudsearch",
      "sns",
      "sqlworkbench",
      "ecr",
      "sts",
      "proton",
      "omics",
      "voiceid",
      "aws-marketplace",
      "quicksight",
      "config",
      "events",
      "shield",
      "ec2",
      "datazone",
      "connect-campaigns",
      "chime",
      "app-integrations",
      "lightsail",
      "docdb-elastic",
      "aps",
      "notifications",
      "frauddetector",
      "glue",
      "backup-gateway",
      "rekognition",
      "cognito-identity",
      "rolesanywhere",
      "iot",
      "sagemaker",
      "quicksight",
      "datasync",
      "redshift",
      "quicksight",
      "elastic-inference",
      "m2",
      "secretsmanager"
    ]
  }
}
